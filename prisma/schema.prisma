datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

model Degree {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Semester {
  id     Int    @id @default(autoincrement())
  number String @unique
  User   User[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  sex           Sex?
  degree        Degree?   @relation(fields: [degreeId], references: [id])
  semester      Semester? @relation(fields: [semesterId], references: [id])
  accounts      Account[]
  sessions      Session[]

  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  degreeId   Int?
  semesterId Int?
  UserTest   UserTakenTest[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Test {
  id          String          @id @default(cuid())
  name        String
  TestSection TestSection[]
  UserTest    UserTakenTest[]
}

model TestSection {
  id           Int        @id @default(autoincrement())
  title        String
  instructions String
  test         Test       @relation(fields: [testId], references: [id])
  testId       String
  Question     Question[]
}

enum QuestionType {
  SCALE
  OPTION
  SELECTION
  TEXT
}

model Question {
  id            Int          @id @default(autoincrement())
  text          String
  type          QuestionType
  section       TestSection  @relation(fields: [testSectionId], references: [id])
  testSectionId Int
  Option        Option[]
  UserAnswer    UserAnswer[]
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model UserTakenTest {
  id             Int          @id @default(autoincrement())
  startedAt      DateTime
  endedAt        DateTime
  lectureBeganAt DateTime
  user           User         @relation(fields: [userId], references: [id])
  test           Test         @relation(fields: [testId], references: [id])
  userId         String
  testId         String
  UserAnswer     UserAnswer[]
}

model UserAnswer {
  answer          String
  test            UserTakenTest @relation(fields: [userTakenTestId], references: [id])
  question        Question      @relation(fields: [questionId], references: [id])
  userTakenTestId Int
  questionId      Int

  @@id([userTakenTestId, questionId])
}
